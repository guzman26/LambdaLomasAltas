"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockDb = {
    getItem: async (tableName, key) => {
        console.log(`Mock DB: Getting item from ${tableName} with key`, key);
        // Return mock data based on the table and key
        if (tableName === 'Pallets' && key.codigo === '123456789001') {
            return {
                codigo: '123456789001',
                estado: 'open',
                cajas: [],
                cantidadCajas: 0,
                fechaCreacion: '2023-04-21T15:30:00Z',
                ubicacion: 'TRANSITO'
            };
        }
        return undefined;
    },
    putItem: async (tableName, item) => {
        console.log(`Mock DB: Putting item in ${tableName}:`, item);
        return { success: true };
    },
    updateItem: async (tableName, key, updateExpression, expressionAttributeValues, expressionAttributeNames) => {
        console.log(`Mock DB: Updating item in ${tableName} with key`, key);
        console.log('Update expression:', updateExpression);
        console.log('Expression attribute values:', expressionAttributeValues);
        // For the movePallet operation, return a mock updated pallet
        if (tableName === 'Pallets' && key.codigo === '123456789001') {
            return {
                codigo: '123456789001',
                estado: 'open',
                cajas: [],
                cantidadCajas: 0,
                fechaCreacion: '2023-04-21T15:30:00Z',
                ubicacion: expressionAttributeValues[':location'],
                updatedAt: expressionAttributeValues[':updatedAt']
            };
        }
        return {};
    },
    deleteItem: async (tableName, key) => {
        console.log(`Mock DB: Deleting item from ${tableName} with key`, key);
        return { success: true };
    },
    queryItems: async (tableName, keyConditionExpression, expressionAttributeValues, expressionAttributeNames, indexName) => {
        console.log(`Mock DB: Querying items from ${tableName}`);
        console.log('Key condition expression:', keyConditionExpression);
        console.log('Expression attribute values:', expressionAttributeValues);
        // Return empty array as default
        return [];
    },
    scanItems: async (tableName, filterExpression, expressionAttributeValues, expressionAttributeNames) => {
        console.log(`Mock DB: Scanning items from ${tableName}`);
        if (filterExpression)
            console.log('Filter expression:', filterExpression);
        // Return empty array as default
        return [];
    }
};
// Create a wrapper that matches the DynamoDB Document Client interface
const mockDynamoDb = {
    get: async (params) => {
        return {
            Item: await mockDb.getItem(params.TableName, params.Key)
        };
    },
    put: async (params) => {
        return await mockDb.putItem(params.TableName, params.Item);
    },
    update: async (params) => {
        const { TableName, Key, UpdateExpression, ExpressionAttributeValues, ExpressionAttributeNames } = params;
        const Attributes = await mockDb.updateItem(TableName, Key, UpdateExpression, ExpressionAttributeValues, ExpressionAttributeNames);
        return { Attributes };
    },
    delete: async (params) => {
        return await mockDb.deleteItem(params.TableName, params.Key);
    },
    query: async (params) => {
        const { TableName, KeyConditionExpression, ExpressionAttributeValues, ExpressionAttributeNames, IndexName } = params;
        const Items = await mockDb.queryItems(TableName, KeyConditionExpression, ExpressionAttributeValues, ExpressionAttributeNames, IndexName);
        return { Items };
    },
    scan: async (params) => {
        const Items = await mockDb.scanItems(params.TableName, params.FilterExpression, params.ExpressionAttributeValues, params.ExpressionAttributeNames);
        return { Items };
    }
};
exports.default = mockDynamoDb;
//# sourceMappingURL=data:application/json;base64,