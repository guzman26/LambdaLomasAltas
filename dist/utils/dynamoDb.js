"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Import the db.js file with a type assertion
// @ts-ignore
const db_1 = __importDefault(require("./db"));
// Create a simple wrapper to match the interface expected by controllers
const dynamoDb = {
    get: async (params) => {
        return {
            Item: await db_1.default.getItem(params.TableName, params.Key)
        };
    },
    put: async (params) => {
        return await db_1.default.putItem(params.TableName, params.Item);
    },
    update: async (params) => {
        const { TableName, Key, UpdateExpression, ExpressionAttributeValues, ExpressionAttributeNames } = params;
        const Attributes = await db_1.default.updateItem(TableName, Key, UpdateExpression, ExpressionAttributeValues, ExpressionAttributeNames);
        return { Attributes };
    },
    delete: async (params) => {
        const Attributes = await db_1.default.deleteItem(params.TableName, params.Key);
        return { Attributes };
    },
    query: async (params) => {
        const { TableName, KeyConditionExpression, ExpressionAttributeValues, ExpressionAttributeNames, IndexName } = params;
        const Items = await db_1.default.queryItems(TableName, KeyConditionExpression, ExpressionAttributeValues, ExpressionAttributeNames, IndexName);
        return { Items };
    },
    scan: async (params) => {
        const Items = await db_1.default.scanItems(params.TableName, params.FilterExpression, params.ExpressionAttributeValues, params.ExpressionAttributeNames);
        return { Items };
    }
};
exports.default = dynamoDb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vRGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi91dGlscy9keW5hbW9EYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDhDQUE4QztBQUM5QyxhQUFhO0FBQ2IsOENBQTJCO0FBZ0IzQix5RUFBeUU7QUFDekUsTUFBTSxRQUFRLEdBQUc7SUFDZixHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQW9CLEVBQW9DLEVBQUU7UUFDcEUsT0FBTztZQUNMLElBQUksRUFBRSxNQUFNLFlBQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBSSxDQUFDO1NBQzNELENBQUM7SUFDSixDQUFDO0lBRUQsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFvQixFQUFvQixFQUFFO1FBQ3BELE9BQU8sTUFBTSxZQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUssQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQW9CLEVBQTBDLEVBQUU7UUFDN0UsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUseUJBQXlCLEVBQUUsd0JBQXdCLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDekcsTUFBTSxVQUFVLEdBQUcsTUFBTSxZQUFPLENBQUMsVUFBVSxDQUN6QyxTQUFTLEVBQ1QsR0FBSSxFQUNKLGdCQUFpQixFQUNqQix5QkFBMEIsRUFDMUIsd0JBQXdCLENBQ3pCLENBQUM7UUFDRixPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBb0IsRUFBMEMsRUFBRTtRQUM3RSxNQUFNLFVBQVUsR0FBRyxNQUFNLFlBQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBSSxDQUFDLENBQUM7UUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQW9CLEVBQXNDLEVBQUU7UUFDeEUsTUFBTSxFQUNKLFNBQVMsRUFDVCxzQkFBc0IsRUFDdEIseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QixTQUFTLEVBQ1YsR0FBRyxNQUFNLENBQUM7UUFFWCxNQUFNLEtBQUssR0FBRyxNQUFNLFlBQU8sQ0FBQyxVQUFVLENBQ3BDLFNBQVMsRUFDVCxzQkFBdUIsRUFDdkIseUJBQTBCLEVBQzFCLHdCQUF3QixFQUN4QixTQUFTLENBQ1YsQ0FBQztRQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFvQixFQUFzQyxFQUFFO1FBQ3ZFLE1BQU0sS0FBSyxHQUFHLE1BQU0sWUFBTyxDQUFDLFNBQVMsQ0FDbkMsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLGdCQUFnQixFQUN2QixNQUFNLENBQUMseUJBQXlCLEVBQ2hDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FDaEMsQ0FBQztRQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBEeW5hbW9EYkl0ZW0gfSBmcm9tICcuLi90eXBlcyc7XG5cbi8vIEltcG9ydCB0aGUgZGIuanMgZmlsZSB3aXRoIGEgdHlwZSBhc3NlcnRpb25cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBkYlV0aWxzIGZyb20gJy4vZGInO1xuXG5pbnRlcmZhY2UgRHluYW1vUGFyYW1zIHtcbiAgVGFibGVOYW1lOiBzdHJpbmc7XG4gIEtleT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIFVwZGF0ZUV4cHJlc3Npb24/OiBzdHJpbmc7XG4gIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBJdGVtPzogRHluYW1vRGJJdGVtO1xuICBQcm9qZWN0aW9uRXhwcmVzc2lvbj86IHN0cmluZztcbiAgRmlsdGVyRXhwcmVzc2lvbj86IHN0cmluZztcbiAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbj86IHN0cmluZztcbiAgSW5kZXhOYW1lPzogc3RyaW5nO1xuICBSZXR1cm5WYWx1ZXM/OiBzdHJpbmc7XG59XG5cbi8vIENyZWF0ZSBhIHNpbXBsZSB3cmFwcGVyIHRvIG1hdGNoIHRoZSBpbnRlcmZhY2UgZXhwZWN0ZWQgYnkgY29udHJvbGxlcnNcbmNvbnN0IGR5bmFtb0RiID0ge1xuICBnZXQ6IGFzeW5jIChwYXJhbXM6IER5bmFtb1BhcmFtcyk6IFByb21pc2U8eyBJdGVtPzogRHluYW1vRGJJdGVtIH0+ID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgSXRlbTogYXdhaXQgZGJVdGlscy5nZXRJdGVtKHBhcmFtcy5UYWJsZU5hbWUsIHBhcmFtcy5LZXkhKVxuICAgIH07XG4gIH0sXG4gIFxuICBwdXQ6IGFzeW5jIChwYXJhbXM6IER5bmFtb1BhcmFtcyk6IFByb21pc2U8dW5rbm93bj4gPT4ge1xuICAgIHJldHVybiBhd2FpdCBkYlV0aWxzLnB1dEl0ZW0ocGFyYW1zLlRhYmxlTmFtZSwgcGFyYW1zLkl0ZW0hKTtcbiAgfSxcbiAgXG4gIHVwZGF0ZTogYXN5bmMgKHBhcmFtczogRHluYW1vUGFyYW1zKTogUHJvbWlzZTx7IEF0dHJpYnV0ZXM/OiBEeW5hbW9EYkl0ZW0gfT4gPT4ge1xuICAgIGNvbnN0IHsgVGFibGVOYW1lLCBLZXksIFVwZGF0ZUV4cHJlc3Npb24sIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IEF0dHJpYnV0ZXMgPSBhd2FpdCBkYlV0aWxzLnVwZGF0ZUl0ZW0oXG4gICAgICBUYWJsZU5hbWUsIFxuICAgICAgS2V5ISwgXG4gICAgICBVcGRhdGVFeHByZXNzaW9uISwgXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzISwgXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXNcbiAgICApO1xuICAgIHJldHVybiB7IEF0dHJpYnV0ZXMgfTtcbiAgfSxcbiAgXG4gIGRlbGV0ZTogYXN5bmMgKHBhcmFtczogRHluYW1vUGFyYW1zKTogUHJvbWlzZTx7IEF0dHJpYnV0ZXM/OiBEeW5hbW9EYkl0ZW0gfT4gPT4ge1xuICAgIGNvbnN0IEF0dHJpYnV0ZXMgPSBhd2FpdCBkYlV0aWxzLmRlbGV0ZUl0ZW0ocGFyYW1zLlRhYmxlTmFtZSwgcGFyYW1zLktleSEpO1xuICAgIHJldHVybiB7IEF0dHJpYnV0ZXMgfTtcbiAgfSxcbiAgXG4gIHF1ZXJ5OiBhc3luYyAocGFyYW1zOiBEeW5hbW9QYXJhbXMpOiBQcm9taXNlPHsgSXRlbXM6IER5bmFtb0RiSXRlbVtdIH0+ID0+IHtcbiAgICBjb25zdCB7IFxuICAgICAgVGFibGVOYW1lLCBcbiAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb24sIFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcywgXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXMsXG4gICAgICBJbmRleE5hbWVcbiAgICB9ID0gcGFyYW1zO1xuICAgIFxuICAgIGNvbnN0IEl0ZW1zID0gYXdhaXQgZGJVdGlscy5xdWVyeUl0ZW1zKFxuICAgICAgVGFibGVOYW1lLCBcbiAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb24hLCBcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMhLCBcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyxcbiAgICAgIEluZGV4TmFtZVxuICAgICk7XG4gICAgXG4gICAgcmV0dXJuIHsgSXRlbXMgfTtcbiAgfSxcbiAgXG4gIHNjYW46IGFzeW5jIChwYXJhbXM6IER5bmFtb1BhcmFtcyk6IFByb21pc2U8eyBJdGVtczogRHluYW1vRGJJdGVtW10gfT4gPT4ge1xuICAgIGNvbnN0IEl0ZW1zID0gYXdhaXQgZGJVdGlscy5zY2FuSXRlbXMoXG4gICAgICBwYXJhbXMuVGFibGVOYW1lLFxuICAgICAgcGFyYW1zLkZpbHRlckV4cHJlc3Npb24sXG4gICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyxcbiAgICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlTmFtZXNcbiAgICApO1xuICAgIFxuICAgIHJldHVybiB7IEl0ZW1zIH07XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGR5bmFtb0RiOyAiXX0=