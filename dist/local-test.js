"use strict";
// Simple script to test Lambda handlers directly
// This doesn't go through the Lambda infrastructure but tests the business logic
Object.defineProperty(exports, "__esModule", { value: true });
// Set environment variables
process.env.PALLETS_TABLE = 'Pallets';
process.env.HUEVOS_TABLE = 'Huevos';
process.env.BOXES_TABLE_NAME = 'Boxes';
process.env.ISSUES_TABLE = 'Issues';
// Import the handler functions to test
const index_1 = require("./index");
// Test cases for different endpoints
const testCases = {
    movePallet: {
        httpMethod: "POST",
        path: "/movePallet",
        body: JSON.stringify({
            codigo: "123456789001",
            ubicacion: "BODEGA"
        }),
        resource: '',
        pathParameters: {},
        stageVariables: null,
        headers: {},
        multiValueHeaders: {},
        queryStringParameters: {},
        multiValueQueryStringParameters: null,
        isBase64Encoded: false,
        requestContext: {}
    },
    getPallets: {
        httpMethod: "GET",
        path: "/getPallets",
        resource: '',
        pathParameters: {},
        stageVariables: null,
        headers: {},
        multiValueHeaders: {},
        queryStringParameters: {},
        multiValueQueryStringParameters: null,
        isBase64Encoded: false,
        requestContext: {}
    },
    getBodegaEggs: {
        httpMethod: "GET",
        path: "/getBodegaEggs",
        resource: '',
        pathParameters: {},
        stageVariables: null,
        headers: {},
        multiValueHeaders: {},
        queryStringParameters: {},
        multiValueQueryStringParameters: null,
        isBase64Encoded: false,
        requestContext: {}
    }
};
// Run the test for a specific endpoint or all endpoints
async function runTest(endpoint) {
    try {
        if (endpoint && testCases[endpoint]) {
            await testSingleEndpoint(endpoint, testCases[endpoint]);
        }
        else {
            // Test all endpoints
            for (const [name, event] of Object.entries(testCases)) {
                await testSingleEndpoint(name, event);
            }
        }
        console.log("\nAll tests completed!");
    }
    catch (error) {
        console.error("Test failed with error:", error);
    }
}
async function testSingleEndpoint(name, event) {
    console.log(`\n\nTesting ${name} endpoint...`);
    console.log("Input:", JSON.stringify(event, null, 2));
    const result = await (0, index_1.handler)(event);
    console.log("\nResult:");
    console.log(JSON.stringify(result, null, 2));
}
// Change to a specific endpoint name to test only that endpoint
// runTest("movePallet");  
runTest();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xvY2FsLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlEQUFpRDtBQUNqRCxpRkFBaUY7O0FBRWpGLDRCQUE0QjtBQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7QUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO0FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDO0FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQztBQUVwQyx1Q0FBdUM7QUFDdkMsbUNBQWtDO0FBR2xDLHFDQUFxQztBQUNyQyxNQUFNLFNBQVMsR0FBZ0M7SUFDN0MsVUFBVSxFQUFFO1FBQ1YsVUFBVSxFQUFFLE1BQU07UUFDbEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDbkIsTUFBTSxFQUFFLGNBQWM7WUFDdEIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQztRQUNGLFFBQVEsRUFBRSxFQUFFO1FBQ1osY0FBYyxFQUFFLEVBQUU7UUFDbEIsY0FBYyxFQUFFLElBQUk7UUFDcEIsT0FBTyxFQUFFLEVBQUU7UUFDWCxpQkFBaUIsRUFBRSxFQUFFO1FBQ3JCLHFCQUFxQixFQUFFLEVBQUU7UUFDekIsK0JBQStCLEVBQUUsSUFBSTtRQUNyQyxlQUFlLEVBQUUsS0FBSztRQUN0QixjQUFjLEVBQUUsRUFBUztLQUMxQjtJQUVELFVBQVUsRUFBRTtRQUNWLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLElBQUksRUFBRSxhQUFhO1FBQ25CLFFBQVEsRUFBRSxFQUFFO1FBQ1osY0FBYyxFQUFFLEVBQUU7UUFDbEIsY0FBYyxFQUFFLElBQUk7UUFDcEIsT0FBTyxFQUFFLEVBQUU7UUFDWCxpQkFBaUIsRUFBRSxFQUFFO1FBQ3JCLHFCQUFxQixFQUFFLEVBQUU7UUFDekIsK0JBQStCLEVBQUUsSUFBSTtRQUNyQyxlQUFlLEVBQUUsS0FBSztRQUN0QixjQUFjLEVBQUUsRUFBUztLQUMxQjtJQUVELGFBQWEsRUFBRTtRQUNiLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsUUFBUSxFQUFFLEVBQUU7UUFDWixjQUFjLEVBQUUsRUFBRTtRQUNsQixjQUFjLEVBQUUsSUFBSTtRQUNwQixPQUFPLEVBQUUsRUFBRTtRQUNYLGlCQUFpQixFQUFFLEVBQUU7UUFDckIscUJBQXFCLEVBQUUsRUFBRTtRQUN6QiwrQkFBK0IsRUFBRSxJQUFJO1FBQ3JDLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLGNBQWMsRUFBRSxFQUFTO0tBQzFCO0NBQ0YsQ0FBQztBQUVGLHdEQUF3RDtBQUN4RCxLQUFLLFVBQVUsT0FBTyxDQUFDLFFBQWlCO0lBQ3RDLElBQUksQ0FBQztRQUNILElBQUksUUFBUSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sa0JBQWtCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7YUFBTSxDQUFDO1lBQ04scUJBQXFCO1lBQ3JCLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3RELE1BQU0sa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxJQUFZLEVBQUUsS0FBa0I7SUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksY0FBYyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGVBQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztJQUVwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELGdFQUFnRTtBQUNoRSwyQkFBMkI7QUFDM0IsT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaW1wbGUgc2NyaXB0IHRvIHRlc3QgTGFtYmRhIGhhbmRsZXJzIGRpcmVjdGx5XG4vLyBUaGlzIGRvZXNuJ3QgZ28gdGhyb3VnaCB0aGUgTGFtYmRhIGluZnJhc3RydWN0dXJlIGJ1dCB0ZXN0cyB0aGUgYnVzaW5lc3MgbG9naWNcblxuLy8gU2V0IGVudmlyb25tZW50IHZhcmlhYmxlc1xucHJvY2Vzcy5lbnYuUEFMTEVUU19UQUJMRSA9ICdQYWxsZXRzJztcbnByb2Nlc3MuZW52LkhVRVZPU19UQUJMRSA9ICdIdWV2b3MnO1xucHJvY2Vzcy5lbnYuQk9YRVNfVEFCTEVfTkFNRSA9ICdCb3hlcyc7XG5wcm9jZXNzLmVudi5JU1NVRVNfVEFCTEUgPSAnSXNzdWVzJztcblxuLy8gSW1wb3J0IHRoZSBoYW5kbGVyIGZ1bmN0aW9ucyB0byB0ZXN0XG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBMYW1iZGFFdmVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBUZXN0IGNhc2VzIGZvciBkaWZmZXJlbnQgZW5kcG9pbnRzXG5jb25zdCB0ZXN0Q2FzZXM6IFJlY29yZDxzdHJpbmcsIExhbWJkYUV2ZW50PiA9IHtcbiAgbW92ZVBhbGxldDoge1xuICAgIGh0dHBNZXRob2Q6IFwiUE9TVFwiLFxuICAgIHBhdGg6IFwiL21vdmVQYWxsZXRcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBjb2RpZ286IFwiMTIzNDU2Nzg5MDAxXCIsXG4gICAgICB1YmljYWNpb246IFwiQk9ERUdBXCJcbiAgICB9KSxcbiAgICByZXNvdXJjZTogJycsXG4gICAgcGF0aFBhcmFtZXRlcnM6IHt9LFxuICAgIHN0YWdlVmFyaWFibGVzOiBudWxsLFxuICAgIGhlYWRlcnM6IHt9LFxuICAgIG11bHRpVmFsdWVIZWFkZXJzOiB7fSxcbiAgICBxdWVyeVN0cmluZ1BhcmFtZXRlcnM6IHt9LFxuICAgIG11bHRpVmFsdWVRdWVyeVN0cmluZ1BhcmFtZXRlcnM6IG51bGwsXG4gICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgICByZXF1ZXN0Q29udGV4dDoge30gYXMgYW55XG4gIH0sXG4gIFxuICBnZXRQYWxsZXRzOiB7XG4gICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICBwYXRoOiBcIi9nZXRQYWxsZXRzXCIsXG4gICAgcmVzb3VyY2U6ICcnLFxuICAgIHBhdGhQYXJhbWV0ZXJzOiB7fSxcbiAgICBzdGFnZVZhcmlhYmxlczogbnVsbCxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBtdWx0aVZhbHVlSGVhZGVyczoge30sXG4gICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7fSxcbiAgICBtdWx0aVZhbHVlUXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgcmVxdWVzdENvbnRleHQ6IHt9IGFzIGFueVxuICB9LFxuICBcbiAgZ2V0Qm9kZWdhRWdnczoge1xuICAgIGh0dHBNZXRob2Q6IFwiR0VUXCIsXG4gICAgcGF0aDogXCIvZ2V0Qm9kZWdhRWdnc1wiLFxuICAgIHJlc291cmNlOiAnJyxcbiAgICBwYXRoUGFyYW1ldGVyczoge30sXG4gICAgc3RhZ2VWYXJpYWJsZXM6IG51bGwsXG4gICAgaGVhZGVyczoge30sXG4gICAgbXVsdGlWYWx1ZUhlYWRlcnM6IHt9LFxuICAgIHF1ZXJ5U3RyaW5nUGFyYW1ldGVyczoge30sXG4gICAgbXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVyczogbnVsbCxcbiAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgIHJlcXVlc3RDb250ZXh0OiB7fSBhcyBhbnlcbiAgfVxufTtcblxuLy8gUnVuIHRoZSB0ZXN0IGZvciBhIHNwZWNpZmljIGVuZHBvaW50IG9yIGFsbCBlbmRwb2ludHNcbmFzeW5jIGZ1bmN0aW9uIHJ1blRlc3QoZW5kcG9pbnQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcbiAgICBpZiAoZW5kcG9pbnQgJiYgdGVzdENhc2VzW2VuZHBvaW50XSkge1xuICAgICAgYXdhaXQgdGVzdFNpbmdsZUVuZHBvaW50KGVuZHBvaW50LCB0ZXN0Q2FzZXNbZW5kcG9pbnRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGVzdCBhbGwgZW5kcG9pbnRzXG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBldmVudF0gb2YgT2JqZWN0LmVudHJpZXModGVzdENhc2VzKSkge1xuICAgICAgICBhd2FpdCB0ZXN0U2luZ2xlRW5kcG9pbnQobmFtZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIlxcbkFsbCB0ZXN0cyBjb21wbGV0ZWQhXCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUZXN0IGZhaWxlZCB3aXRoIGVycm9yOlwiLCBlcnJvcik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdGVzdFNpbmdsZUVuZHBvaW50KG5hbWU6IHN0cmluZywgZXZlbnQ6IExhbWJkYUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnNvbGUubG9nKGBcXG5cXG5UZXN0aW5nICR7bmFtZX0gZW5kcG9pbnQuLi5gKTtcbiAgY29uc29sZS5sb2coXCJJbnB1dDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuICBcbiAgY29uc29sZS5sb2coXCJcXG5SZXN1bHQ6XCIpO1xuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpKTtcbn1cblxuLy8gQ2hhbmdlIHRvIGEgc3BlY2lmaWMgZW5kcG9pbnQgbmFtZSB0byB0ZXN0IG9ubHkgdGhhdCBlbmRwb2ludFxuLy8gcnVuVGVzdChcIm1vdmVQYWxsZXRcIik7ICBcbnJ1blRlc3QoKTsgIl19