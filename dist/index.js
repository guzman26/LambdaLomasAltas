"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// Models
const SystemConfig_1 = __importDefault(require("./models/SystemConfig"));
// Controllers
const pallets_1 = __importDefault(require("./controllers/pallets"));
const boxes_1 = __importDefault(require("./controllers/boxes"));
// Utils
const response_1 = __importDefault(require("./utils/response"));
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const codepipeline = new aws_sdk_1.default.CodePipeline();
// Constants from models
const LOCATIONS = SystemConfig_1.default.getLocations();
const ITEM_TYPES = SystemConfig_1.default.getItemTypes();
const movePallet_1 = __importDefault(require("./handlers/movePallet"));
// Helper functions
const helpers = {
    parseBody: (event) => {
        if (!event.body)
            return {};
        try {
            return typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
        }
        catch (_a) {
            throw new Error("Invalid request body: unable to parse JSON");
        }
    },
    getQueryParams: (event) => event.queryStringParameters || {},
    validateRequired: (data, requiredParams) => {
        const missing = requiredParams.filter((param) => !data[param]);
        if (missing.length > 0) {
            throw new Error(`Missing parameters: ${missing.join(", ")}`);
        }
    },
    validateLocation: (location, allowed) => {
        if (!allowed.includes(location)) {
            throw new Error(`Invalid location: ${location}. Valid options: ${allowed.join(", ")}`);
        }
    },
};
// Create a handler wrapper to standardize error handling
const createHandler = (handlerFn, options = {}) => {
    return async (event) => {
        try {
            return await handlerFn(event, options);
        }
        catch (error) {
            console.error("❌ Error in route handler:", error);
            return (0, response_1.default)(error.statusCode || 500, error.message);
        }
    };
};
// Define GET routes
const getRoutes = {
    "/getBodegaEggs": createHandler(async () => {
        return await boxes_1.default.read.getBoxesByLocation(LOCATIONS.BODEGA);
    }),
    "/getPackingData": createHandler(async () => {
        return await boxes_1.default.read.getBoxesByLocation(LOCATIONS.PACKING);
    }),
    "/getVentaData": createHandler(async () => {
        return await boxes_1.default.read.getBoxesByLocation(LOCATIONS.VENTA);
    }),
    "/getEggsByDate": createHandler(async (event) => {
        const { date } = helpers.getQueryParams(event);
        helpers.validateRequired({ date }, ['date']);
        return await boxes_1.default.read.getBoxesByDate(date);
    }),
    "/production": createHandler(async () => {
        return await boxes_1.default.read.getAllBoxes();
    }),
    "/getPallets": createHandler(async () => {
        return await pallets_1.default.read.getAllPallets();
    }),
    "/getActivePallets": createHandler(async () => {
        return await pallets_1.default.read.getActivePallets();
    }),
    // Add more GET routes as needed
};
const postRoutes = {
    "/movePallet": createHandler(async (event) => {
        const { codigo, ubicacion } = helpers.parseBody(event);
        helpers.validateRequired({ codigo, ubicacion }, ['codigo', 'ubicacion']);
        helpers.validateLocation(ubicacion, ["TRANSITO", "BODEGA", "VENTA"]);
        return await (0, movePallet_1.default)(codigo, ubicacion);
    }),
    // Add more POST routes as needed
};
const putRoutes = {
// PUT routes
};
const optionsRoutes = {
    // Handle all OPTIONS requests with a CORS-friendly response
    "*": async () => {
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,GET,POST,PUT,DELETE',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Amz-Date,X-Api-Key',
            },
            body: '',
        };
    }
};
const handler = async (event, context) => {
    // Handle CodePipeline events
    if ('CodePipeline.job' in event) {
        const jobId = event['CodePipeline.job'].id;
        try {
            // Logic for deployment operation here
            // Report success explicitly
            await codepipeline.putJobSuccessResult({ jobId }).promise();
        }
        catch (error) {
            console.error("❌ Error in Lambda execution from CodePipeline:", error);
            if (context) {
                await codepipeline.putJobFailureResult({
                    jobId,
                    failureDetails: {
                        message: JSON.stringify(error.message),
                        type: 'JobFailed',
                        externalExecutionId: context.awsRequestId,
                    },
                }).promise();
            }
        }
        return;
    }
    // Handle API Gateway events
    try {
        const lambdaEvent = event;
        console.log('Event received:', {
            method: lambdaEvent.httpMethod,
            path: lambdaEvent.path,
            queryParams: lambdaEvent.queryStringParameters,
            pathParams: lambdaEvent.pathParameters,
        });
        const method = lambdaEvent.httpMethod;
        const path = lambdaEvent.path;
        if (!method || !path) {
            return (0, response_1.default)(400, "Invalid request: missing method or path");
        }
        // Handle OPTIONS method for CORS preflight
        if (method === "OPTIONS") {
            return await optionsRoutes["*"]();
        }
        // Get the appropriate routes object based on HTTP method
        const routes = method === "GET" ? getRoutes :
            method === "POST" ? postRoutes :
                method === "PUT" ? putRoutes : null;
        if (!routes)
            return (0, response_1.default)(405, `Method not supported: ${method}`);
        // Try exact path match first
        let handler = routes[path];
        // If no handler found, return 404
        if (!handler) {
            return (0, response_1.default)(404, `Route not found: ${path}`);
        }
        console.log(`Invoking handler for ${method} ${path}`);
        return await handler(lambdaEvent);
    }
    catch (error) {
        console.error("❌ Unhandled Error:", error);
        return (0, response_1.default)(500, "Internal server error", { error: error.message });
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,